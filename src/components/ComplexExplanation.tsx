import React from 'react';

const ComplexExplanation: React.FC = () => {
    return (
        <div style={{ marginTop: '2rem' }}>
            <h2>3. 为何要用 sin + cos？（复数形式）</h2>

            <h3>（1）相位问题</h3>
            <ul>
                <li>有些波可能是 sin 形式，也可能是 cos 形式，或者在它们之间的任何相位（延迟或提前）。</li>
                <li>如果只用 sin 去检测，就可能漏掉跟 cos 同相的信号成分。</li>
            </ul>

            <h3>（2）正交向量</h3>
            <ul>
                <li>sin 和 cos 彼此垂直（正交），就像二维坐标系的 X 轴和 Y 轴。</li>
                <li>这样我们既可以捕捉“同相分量”（对应 cos），也可以捕捉“相差 90 度的分量”（对应 sin）。</li>
                <li>合起来就能完整描述“幅度”和“相位”。</li>
            </ul>

            <p>
                所以，傅里叶变换实际上是：<br />
                <code>匹配(cos(2πft)) + i × 匹配(sin(2πft))</code><br />
                用一个复数（包含实部 Re 和虚部 Im）来代表“这个频率到底有多强、相位是怎样”。
            </p>

            <h4>幅值（Magnitude）：</h4>
            <p>
                计算公式为： |c| = √(Re² + Im²) <br />
                这等同于对实部和虚部分别平方、求和后开平方，即相当于取了“绝对值”。
            </p>

            <h4>相位（Phase）：</h4>
            <p>
                通常用反正切函数计算： θ = arctan2(Im, Re) <br />
                它告诉你该频率成分在时域信号中的相位偏移是多少。
            </p>

            <h2>4. 检测“多频率合成”的信号</h2>
            <h3>（1）现实信号通常有很多频率</h3>
            <p>
                举个例子：你的声音里可能既有 100Hz 又有 200Hz，还夹杂其他噪声。<br />
                表面上看是一条很复杂的波形，但我们可以把它分成一小段一小段（帧）。
            </p>

            <h3>（2）在每一小段上，做“对所有可能频率的匹配”</h3>
            <ul>
                <li>比如你会问：10Hz、20Hz、30Hz……1000Hz，它们各自在这小段里占了多少成分？</li>
                <li>把所有频率的匹配结果（幅值）排成一列，就得到这段时域信号的“频谱”。</li>
                <li>频谱里某个频率值很高 → 说明该段信号主要由这个频率主导</li>
                <li>频谱里某个频率值很低 → 说明该段信号里几乎没有这个频率</li>
            </ul>
        </div>
    );
};

export default ComplexExplanation;
